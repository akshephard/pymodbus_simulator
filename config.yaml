server:
    ########################## Modbus server settings #########################

    port: 5020
    slave_id: 0x1
    update_time: 5

    ######################### Register settings ###############################
                            ### User defined block ###
    # If this is set to True the block sizes can be specified in the config file
    # If this is set to False the block sizes are automatically calculated from
    # the amount of registers defined in the config file for each register type.
    use_block_size: True

                            ### Block size and offset ###
    # For each register size a maximum amount of addressable registers may be
    # specified. Additionally, an offset may also be applied for each register.
    # If the block size is 1000 and the offset is 1000, the range for that
    # register type would be 1000-1999. This is useful if you would like to
    # match exact register addresses with a target device.

    coil_block_size: 1000
    coil_block_offset: 0


    discrete_block_size: 1000
    discrete_block_offset: 0

    holding_block_size: 1000
    holding_block_offset: 0

    input_block_size: 1000
    input_block_offset: 0

                            ### Random Range ###
    # Sets the range of random values for the float32,int32,int16 holding and
    # input registers
    random_range: [1,1000]

                            ### Ramp Slope ###
    # Sets the slope for the ramp function for the float32,int32,int16 holding and
    # input registers
    ramp_slope: 1.0

                        ### Coil/discrete registers ###

    # For each coil/discrete register type you can specify a name which is the
    # key in the dictionary. The value of the dictionary is a list which specifies:
    # [address, initial value, turn cycle on or off]

    # The third value in the list is a boolean value which determines whether
    # the server will switch the value of the coil/discrete register. This can
    # be useful for testing code that will be interacting with a modbus device.

    # When dealing with coil registers, initliazing 100 registers will lead to
    # an effective address range of 0-98

    coil_registers: {status: [0,1,'True'],other_status: [47,1,'True']}
    discrete_registers: {status: [0,1,'True'],other_status: [47,1,'True']}

                        ### Holding/Input registers ###

    # For each register type you can specify a name which is the key in the dictionary
    # the value of the dictionary is a list which specifies:
    # [address, initial value, function to apply]

    int16_holding: {count: [106,-10,'ramp']}
    int32_holding: {test_count: [104,-8,'none']}
    float_holding: {signal_strength  : [100,123.456,'random'],temperature: [102,100.0,'ramp']}

    int16_input: {count: [106,-10,'none']}
    int32_input: {test_count: [104,-10,'none']}
    float_input: {signal_strength  : [100,123.456,'random'],temperature: [102,100.0,'random']}
